document.addEventListener('DOMContentLoaded', function() {

    // --- Mobile Menu Logic ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    if (mobileMenuButton) {
        mobileMenuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
    }

    // --- Tabs & Accordion Logic (for bot.html) ---
    const problemTabs = document.querySelectorAll('.problem-tab');
    if (problemTabs.length > 0) {
        const solutionContents = document.querySelectorAll('.solution-content');
        problemTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetId = tab.dataset.tab;
                problemTabs.forEach(t => {
                    t.classList.remove('tab-active');
                    t.classList.add('tab-inactive');
                });
                tab.classList.replace('tab-inactive', 'tab-active');
                solutionContents.forEach(c => c.id === targetId ? c.classList.remove('hidden') : c.classList.add('hidden'));
            });
        });
    }

    const faqQuestions = document.querySelectorAll('.faq-question');
    if (faqQuestions.length > 0) {
        faqQuestions.forEach(question => {
            question.addEventListener('click', () => {
                const answer = question.nextElementSibling;
                const arrow = question.querySelector('.arrow-down');
                const isOpening = !answer.style.maxHeight || answer.style.maxHeight === '0px';

                // Close all other accordions before opening the new one
                faqQuestions.forEach(q => {
                    if (q !== question) {
                        q.nextElementSibling.style.maxHeight = '0px';
                        if (q.querySelector('.arrow-down')) q.querySelector('.arrow-down').classList.remove('rotated');
                    }
                });

                if (isOpening) {
                    answer.style.maxHeight = answer.scrollHeight + 'px';
                    if (arrow) arrow.classList.add('rotated');
                } else {
                    answer.style.maxHeight = '0px';
                    if (arrow) arrow.classList.remove('rotated');
                }
            });
        });
    }

    // --- Gemini AI Consultant Logic ---
    const askAiButton = document.getElementById('ask-ai-button');
    if (askAiButton) {
        const aiQuestionInput = document.getElementById('ai-question');
        const aiResponseContainer = document.getElementById('ai-response-container');
        const aiResponseDiv = document.getElementById('ai-response');

        // A mock set of rules for the AI to use as context.
        const projectRules = `
Устав Редакторов

Основная цель устава – создать единую иерархическую структуру, способствующую эффективному функционированию HJR и обеспечению справедливости и равенства для всех участников.

Настоящий устав регулирует деятельность проекта HJR, устанавливая основные принципы, нормы и правила, которым следуют все её члены. Устав необходим для обеспечения порядка, ясности и согласованности в работе проекта, а также для поддержки его целей и задач. 

Главным в иерархии, являются правила указывающие направление проекта, устанавливающие рамки его деятельности. 

Для регулирования и обеспечения соблюдения правил, была внедрена специальная роль Исполнителя. Попечитель совета редакторов, главная задача которого: регулирование конфликтов, обеспечение равноправия и справедливости.

Управляющие проекта - это совет редакторов, решающие все вопросы касаемо решающих изменений в проекте. Изменение и редактирование правил, смена исполнителя, управление задачами исполнителя, слежка за действиями исполнителя.

ТЕРМИНОЛОГИЯ

Совет Редакторов (СР) или Совет – приватный чат в Telegram, Discord, в котором определенное количество людей управляет проектом.

Редактор – читатель состоящий в Совете Редакторов.

Проект – редакторская группа HJR и все принадлежащие ей каналы, чаты и блоги.

Правила проекта – все правила в Teletype находящиеся в соответствующей критерии.

Читатель – потенциальный читатель проекта.

Удаление – исключение из Совета Редакторов, включая снятие возможностей писать в блоге и исключение из чата СР.

Решение совета – результат какого-либо голосования.

Блокировка участника – ограничение возможностей писать и читать на проекте.

Правила Публикации (ПП) – правила, указанные на платформе Teletype.

Вхождение – вступление в чат редакторов.

Исполнитель – лидер проекта, ответственный за сохранение порядка, подробнее разделы ниже.

Апелляция – подача жалобы с требованием пересмотра.

Специальная группа – группа смотрителей поданной апелляцией.

Устанавливание советом – решением совета, вынесенный результат голосования.

Снятие – лишение редактора возможностей исполнителя.

Группа редакторов - выбранный редакторами чат, конференция, группа в социальных сетях, где редакторы ведут ведут общение, основную работу.

Кандидат - потенциальное лицо, которое хочет стать какой-либо ролью в проекте.

Все в нашем проекте не обязаны перед проектом ничем. Все её участники это волонтёры которые вкладывают усилия для достижения общей цели.
1. Основные правила и принципы

1.1. Вступая в Совет Редакторов, каждый участник автоматически принимает все правила и уставы проекта, о чем он должен быть предупреждён.
 - Перед вступлением, каждый кандидат должен согласиться со всеми правилами.

1.2. Незнание правил или устава не освобождает от ответственности.

1.3. Редактор не может отказаться от соблюдения правил без удаления.

1.4. Каждый редактор должен соблюдать правила Совета Редакторов и правила публикации проекта.

1.5. Нарушение правил должно влечь за собой меры со стороны других редакторов, такие как предупреждение или удаление, путём всеобщего голосования.
 1.5.1. Редактор, изменивший правила без голосования и соответствующего решения - должен быть удалён.

1.6. Запрещается распространение конфиденциальной информации из группы совета редакторов.
 - Любая информация распространение которого не было согласовано с владельцем, запрещено.

1.7. Проект перенимает цели Википедии и стремиться стать авторитетным источником. 
 - Мы стремимся стать авторитетным источником, свободным источником знаний, основанной на волонтёрской помощи любого желающего.

1.8. Тематикой канала являются книги и сценарии ничто иное кроме них.
- Электронные книги, печатные, словари, сказки, поэмы, сценарии фильмов, сериалов, пьес и так далее. Подробнее в ссылке.

1.9. Если Совет Редакторов отклониться от тематики канала, то все его участники должны быть расформированы действующим системным владельцем каналов и блогов.
 - Мы волнуемся за будущее нашего проекта, поэтому готовы пойти к радикальным мерам ради сохранения концепта.

1.10. Любое изменение в правилах должно быть аргументировано и подтверждено среди редакторов.
 1.10.1. Раздел Основные правила и принципы - может изменяться только через голосование в совете и обязательно в широкой аудитории проекта.
 - Наши решения должны быть основаны на интересах сообщества, наших читателей.

1.11. Любое решение может быть апеллировано, исполнитель должен предоставлять всем эту возможность.
 - Мы готовы услышать любую критику в свою сторону чтобы переоценить свои действия.
2. Взаимоотношения между редакторами и принципы этики

2.1. Оскорбления в любой форме запрещены.

2.2. Распространение личной информации без разрешения автора запрещено и должно быть удалено с проекта.

2.3. Все обсуждения и споры должны вестись в конструктивной и уважительной форме, без перехода на личности.

2.4. Редакторы могут вести обсуждения в любой мегаформе.
- Это могут быть мегасозвоны, мегавстречи, мегавидео и прочие.
3. Исполнитель проекта

3.1. Исполнитель не входит в совет редакторов.

3.2. Исполнитель принимает этот раздел правил сразу после избрания, и должен их соблюдать.

3.3. Исполнитель несет ответственность за свои действия. При запросе, он должен объяснить и аргументировать их.
 - Действия исполнителя должны быть прозрачны, соответствующие правилам.

3.4. Исполнитель должен регулировать соблюдение правил и разрабатывать их в случае соответствующего решения.
 - Действия всех редакторов должны соответствовать правилам.

3.5. Исполнитель должен быть посредником в конфликтах совета.
 3.5.1. Исполнитель должен принимать сторону правил, объективно и критически оценивать стороны разногласия. 

3.6. Исполнитель может быть снят решением совета.
 - Исполнитель не великое божество, выданные ему возможности могут быть ограничены.

3.7. Исполнитель имеет возможность удалять редакторов без всеобщего голосования, только если они нарушили правила проекта. 
 3.7.1. До удаления исполнитель должен доказать факт нарушения правил редактором.
 3.7.2. После удаления, совет редакторов должен оценить действие             исполнителя проведя голосование. Деятельность исполнителя будет приостановлена, пока голосование не окончится.
 3.7.3. Исполнитель может удалить разом, только одного редактора.
 3.7.4. Если исполнитель не смог доказать нарушение, то удалённый редактор должен быть возвращён по собственному желанию, а исполнитель - понести ответственность.

3.8. Исполнитель должен обеспечить прозрачность действий совета.
 - Действия совета не должны быть скрытными, они должны быть видны для всех редакторов.

3.9. Исполнитель должен обеспечить всем редактором возможность для апелляции, любых решений (подробнее раздел 8).

3.10. Исполнителю запрещено злоупотреблять выданными ему возможностями.
- Злоупотреблением считается игнорирование лимитов, рамков, установленных правилами проекта.

3.11. Раз в три месяца, должны проводится анонимные голосования среди всех редакторов, с целью проверки качества работы исполнителя. 
 3.11.1. Если по результатом голосования, большинство будет недовольным, совет должен переоценить его действия и в случае необходимости снять с роли исполнителя.
 3.11.2. Голосования инициировать должен сам исполнитель или по желанию, другие редакторы.

3.12. В случае, если весь совет редакторов отклонится от тематики проекта, правил, исполнитель имеет возможность расформировать весь состав отправив запрос искусственному интеллекту с доказательствами и соответствующими аргументами.
 3.12.1. После расформирования, на время отсутствия совета (от двух человек), исполнитель должен набрать новый состав подходящий под критерии для кандидатов и приостановить работу проекта. 
 3.12.2. Исполнитель должен предоставить возможность апелляции для расформированного состава. 
 3.12.3. Запрос на расформирования должен быть рассмотрен только раз в 6 месяцев с последнего запроса.

3.13. Права администратора должны быть выданы новому исполнителю после избрания.

3.14. Срок нахождения в роли исполнителя составляет девять месяцев с момента избрания.
 3.14.1. По истечению срока исполнитель должен быть снят немедленно, вне зависимости от решения совета.

3.15. Запрещено оставлять вакантным роль исполнителя больше месяца, если имеются подходящие кандидаты.

3.16. Исполнитель должен быть активным, нельзя бездействовать и не участвовать в проекта больше недели без предупреждения совета.
 3.16.1. Во время предупреждённого отпуска исполнителя, на его места должен быть временно назначен другой участник совета голосованием.
 3.16.2. Если отсутствие исполнителя не было обусловлено причиной, он должен быть снят.
Основные задачи исполнителя (на основе правил 3-его пункта)
4. Совет редакторов

4.1. Совет является главной управляющей группой проекта.

4.2. Совету запрещено выставлять несправедливые решения.
 4.2.1. Несправедливыми решениями считаются результаты голосований, которые не соответствуют правилам проекта.
 - Например, изменение первого пункта, удаление проекта, бан всех читателей, запрет на общение.

4.3. Совет должен следить за действиями исполнителя.

4.4. Каждый может вступить в совет редакторов, если владеет русском языком на свободном уровне, вне зависимости от расы, гендера или иных показателей.

4.5. Совет редактор должен провести голосование для новых кандидатов. Результаты голосований должны быть прозрачными, и показаны в виде процентов.

4.6. Все решения советов обязательны к исполнению для всех редакторов. 
- Но это не значит, что их нельзя обжаловать.
5. Отбор редакторов

5.1. Каждый может вступить в совет редакторов, если владеет русским языком на свободном уровне.

5.2. Проверкой кандидатов занимается действующий исполнитель проекта.

5.3. Каждый новый редактор, должен пройти тест на проверку знаний о проекте и о его правилах.

5.4. Каждый кандидат должен пройти проверку, прежде чем он войдет.

5.5. Каждый кандидат должен иметь возможность вступить в группу редакторов.
6. Избрание исполнителей

6.1. Все кандидаты должны быть рассмотрены и избраны советом.

6.2. Кандидат должен соответствовать всем этим критериям.

6.3. Кандидат должен владеть русским языком на свободном уровне.

6.4. Кандидат до избрания не должен иметь предупреждения, удаления, санкции со стороны редакторов.

6.5. Кандидат должен знать все правила проекта, и должен пройти соответствующую проверку.
 6.5.1. Проверка проводится путём составление текстов, ответами на вопросы, прохождением интервью.
 6.5.2. Инструкции проверок устанавливает совет.

6.6. Кандидату должно быть 18 лет, юридическое совершеннолетие. 

6.7. Кандидат должен находится и участвовать в проекте как минимум месяц.

6.8. Кандидатом может быть любой редактор, если он подходит под критерии.

6.9. Кандидаты могут агитировать себя в соответствии с правилами во время избрания.

6.10. Кандидатам запрещается проявлять какие либо давления на редакторов.

6.11. Процесс избрания должно проходить в виде анонимного голосования, в соответствии с правилами голосования (6-го пункта).

6.12. Один и тот же редактор может избираться только два раза подряд.

6.13. Запрещено заставлять редакторов избираться в исполнители.

6.14. Процесс избрания можно начать только после снятия предыдущего исполнителя или смены правил. Для совета даётся 10 дней на обсуждение.

6.15. Кандидатам запрещено голосовать за себя.
7. Правила голосований

7.1. Фальсификация голосов запрещена.

7.2. Создание всеобщих голосований редакторами без связи с проектом запрещено.

7.3. Принуждение редакторов голосовать определенным образом запрещено.

7.4. Каждый редактор может проголосовать за любой вариант, указанный в голосовании, при условии соответствия правилам публикации.

7.5. Голосование может инициировать каждый редактор, если это касается важных изменений, затрагивающих читателей, других редакторов или правила проекта.

7.6. В процессе голосования должны быть рассмотрены все возможные варианты, предложенные другими редакторами.

7.7. Каждый редактор должен проголосовать. 

7.8. Если на голосовании нет подходящего варианта, редактор может сообщить об этом - тогда голосование и его результаты не будут считаться действительными. Исключением считается состояние неактивности.

7.9. Участники Совета могут высказывать своё мнение и агитировать во время голосования, соблюдая устав.

7.10. При конфликтных голосованиях к каждому варианту должны быть приложены соответствующие аргументы, противостоящие другим вариантам.

7.11. Если результаты голосования оказываются патовыми (равное количество голосов за все варианты) и никто из редакторов не намерен менять свой выбор, проводится повторное обсуждение и голосование. 
 6.11.1 Если снова возникает патовая ситуация, окончательное решение принимается по результатам дополнительного обсуждения и согласования всех редакторов.

7.12. Изменения должны быть внесены тем, кто начал голосование, после окончания, в пользу варианта, набравшего большинство голосов.

7.13. Информация о результатах и авторов выбранных вариантов должна быть прозрачна и видна всем.

7.14. На каждое голосование должен присутствовать дедлайн до которого все участники должны проголосовать. Срок дедлайна выставляется по мере важности голосования.
8. Процедура апелляции

8.1. Все апелляции должен рассматривать искусственный интеллект.

8.2. Информация передаваемая искусственному интеллекту должна быть открытой и видна для всех участников группы.

8.3. Код передающий информацию к искусственному интеллекту должен быть открыт и виден для всех, вне зависимости от принадлежности к HJR.

8.4. Запрещено намеренно влиять на решения искусственного интеллекта путем создания скрытых функций внутри кода.

8.5. Решение ИИ может не считается действительным если то, нарушает правила проекта.

8.6. Каждое решение ИИ может быть оспорено другими редакторами только один раз, путем подачи заявки повторного рассмотрения к ИИ, с новыми аргументациями их доказательствами.

8.7. Решения ИИ должны быть исполнены всеми редакторами, кроме случаев указанных в пунктах 8.6, 8.5, 8.7, или случаев при нарушении какого либо пункта этого раздела.

8.8. "Пакет дела", передаваемый ИИ, должен содержать: 
а) Полный текст оспариваемого решения/голосования. 
б) Все аргументы и ответы на вопросы от заявителя. в) Все контраргументы и ответы на вопросы от Совета. 
г) Полный и актуальный текст Устава и всех правил проекта на момент подачи апелляции.

8.9. Срок подачи апелляции составляет 72 часа с момента принятия оспариваемого решения. Апелляции, поданные после этого срока, к рассмотрению не принимаются, за исключением особых обстоятельств, подтвержденных Советом. 

8.10. В случае технического сбоя API или получения от ИИ ответа, не соответствующего запросу (бессмысленный текст), процедура рассмотрения запускается повторно. Если сбой повторяется трижды, апелляция выносится на рассмотрение действующего Исполнителя, чье решение в данном случае будет окончательным. 

8.11. Все финальные вердикты ИИ вместе с "пакетом дела" автоматически архивируются в специальном закрытом канале. Этот архив служит для анализа работы системы и может быть использован для разрешения будущих споров.
9. Санкции

9.1. Каждое предупреждение должно выдаваться редактору путём голосования в совете, только если редактор нарушил правила.

9.2. Исполнитель может выдать предупреждение без голосования, только если редактор нарушил правила. 

9.3. После пяти предупреждений редактор должен быть удалён на девять месяцев.

9.4. За следующие нарушения правил, должно выдаваться одно предупреждение за раз:

    Создание и призыв к голосованию которое не имеет отношение к проекту (к правилам, к постам, к социальным сетям проекта, к исполнителю, к действиям исполнителя, к действиям совета)
    Оскорбление участников, редакторов.
    Анонимное создание голосований, если то не указано правилами.
    Распространение конфиденциальной информации в чате совета и за чатом совета, на пространстве проекта.
    Публикация постов не имеющие отношения к книгам.
    Игнорирование предпочтений редакторов вставить свой вариант во время голосования (подробнее 7.6, 7.8)

9.5. За другие нарушения, которые не были здесь указаны, нарушитель либо должен быть удалён навсегда, либо срок должен установить совет, начиная от трёх месяцев.

9.6. Если редактор совершает необратимые последствия от которого пострадало всё сообщество (серьёзная форма нарушения правил), то редактор будет удален навсегда.

9.7. Виды серьёзных форм нарушения правил.
 9.7.1. Порча контента: Удаление\\Изменение под корень всё без причины.
 9.7.2. Оскорбление, Брань, Унижение на публику.
 9.7.3. Устраивание заговоров против участников и всего канал HJR.
 9.7.4. Неоднократное нарушение.
`;

        /**
         * Calls the Gemini API with a given prompt and handles retries with exponential backoff.
         * @param {string} prompt The complete prompt to send to the API.
         * @returns {Promise<string>} The text response from the AI.
         */
        const callGeminiAPI = async (prompt) => {
            let delay = 1000; // Initial delay of 1 second
            for (let i = 0; i < 5; i++) { // Retry up to 5 times
                try {
                    const apiKey = ""; // The API key is injected by the execution environment.
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                    const payload = {
                        contents: [{
                            role: "user",
                            parts: [{ text: prompt }]
                        }]
                    };

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.candidates && result.candidates.length > 0 &&
                            result.candidates[0].content && result.candidates[0].content.parts &&
                            result.candidates[0].content.parts.length > 0) {
                            return result.candidates[0].content.parts[0].text;
                        } else {
                            // If the response structure is valid but empty, treat it as an error to trigger retry.
                            throw new Error("Invalid response structure from API");
                        }
                    } else if (response.status === 429 || response.status >= 500) {
                        // For throttling or server errors, wait and retry.
                        await new Promise(resolve => setTimeout(resolve, delay));
                        delay *= 2; // Double the delay for the next retry.
                    } else {
                        // For other client-side errors (e.g., 400 Bad Request), don't retry.
                        const errorResult = await response.json();
                        throw new Error(errorResult.error.message || `API request failed with status ${response.status}`);
                    }
                } catch (error) {
                    if (i === 4) { // If this was the last attempt
                        console.error("Error calling Gemini API after multiple retries:", error);
                        return `Произошла ошибка при обращении к ИИ. Пожалуйста, попробуйте еще раз позже. (${error.message})`;
                    }
                    // Wait before the next retry
                    await new Promise(resolve => setTimeout(resolve, delay));
                    delay *= 2;
                }
            }
            return "Не удалось получить ответ от ИИ после нескольких попыток.";
        };

        askAiButton.addEventListener('click', async () => {
            const question = aiQuestionInput.value.trim();
            if (!question) {
                // Display a message in the response box instead of using alert().
                aiResponseContainer.classList.remove('hidden');
                aiResponseDiv.textContent = 'Пожалуйста, введите ваш вопрос в поле выше.';
                return;
            }

            // --- UI update: Show loading state ---
            aiResponseContainer.classList.remove('hidden');
            aiResponseDiv.innerHTML = '<div class="flex items-center justify-center p-4"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500"></div></div>';
            askAiButton.disabled = true;
            askAiButton.textContent = 'Обработка...';

            // --- Construct the prompt for the Gemini API ---
            const fullPrompt = `${projectRules}\n\nВопрос пользователя: "${question}"\n\nОтветь на вопрос пользователя, основываясь строго на приведенном выше уставе. Будь краток и ясен.`;

            // --- Call the API and get the response ---
            const responseText = await callGeminiAPI(fullPrompt);

            // --- UI update: Display response and restore button ---
            aiResponseDiv.textContent = responseText;
            askAiButton.disabled = false;
            askAiButton.textContent = 'Задать вопрос';
        });
    }
});
